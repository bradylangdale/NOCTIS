@page "/geofenceditor"
@using WebUI.Data

@using System.Timers

@inject DroneControlService drone
@inject IJSRuntime JSRuntime

<PageTitle>Geofence Editor</PageTitle>

<h1>Geofence Editor</h1>

<p>Draw the drones geofence below.</p>
<p>
<button @onclick="SaveGeofence">Save Map</button>
<button @onclick="GeneratePath">Generate Path</button>
<button @onclick="GenerateSurvey">Generate Survey</button>
<button @onclick="ClearMarkers">Clear Markers</button>
<button @onclick="CenterMap">Center Map</button>
</p>
<div id="map" style="height:calc(100vh - 14rem);width:100%;"></div>

@code{
    private string response = "";
    private string lat = "0.0";
    private string lng = "0.0";

    private Timer timer = new Timer(1000);

    protected override void OnInitialized()
    {
        timer.Elapsed += (sender, eventArgs) => OnTimerCallback();
        timer.AutoReset = true;
        timer.Start(); 
    }
    
    public async void CenterMap()
    {
        drone.GetDronePosition(ref lat, ref lng);
        
        if (lat != "N/A" && lng != "N/A")
        {
            string pos = "[ " + lat + ", " + lng + " ]";
            await JSRuntime.InvokeVoidAsync("geofenceEditor.centerMap", pos);

            StateHasChanged();
        }
    }

    public async void SaveGeofence()
    {
        var data = await JSRuntime.InvokeAsync<Object>("geofenceEditor.getData", null);
        drone.SendCommand("Geofence: " + data);

        while (!drone.CheckResponses(ref response));

        StateHasChanged();
    }

    public async void ClearMarkers()
    {
        await JSRuntime.InvokeVoidAsync("geofenceEditor.clearMarkers", null);
    }

    public async void GeneratePath()
    {
        var data = await JSRuntime.InvokeAsync<Object>("geofenceEditor.getMarkers", null);
        drone.SendCommand("MakePath: " + data);

        string path = "";
        while (!drone.CheckResponses(ref path));
        while (!drone.CheckPathResponses(ref path));

        await JSRuntime.InvokeVoidAsync("geofenceEditor.setMarkers", path);
    }

    public async void GenerateSurvey()
    {
        var data = await JSRuntime.InvokeAsync<Object>("geofenceEditor.getMarkers", null);
        drone.SendCommand("MakeSurvey: " + data);

        string path = "";
        while (!drone.CheckResponses(ref path));
        while (!drone.CheckSurveyResponses(ref path));

        await JSRuntime.InvokeVoidAsync("geofenceEditor.setMarkers", path);
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            drone.SendCommand("GetGeofence");

            string data = "";
            while (!drone.CheckResponses(ref data));
            while (!drone.CheckGeofenceResponse(ref data));

            await JSRuntime.InvokeVoidAsync("geofenceEditor.setData", data);
            await JSRuntime.InvokeVoidAsync("initGeofenceEditor", null);

            drone.GetDronePosition(ref lat, ref lng);
        
            if (lat != "N/A" && lng != "N/A")
            {
                string pos = "[ " + lat + ", " + lng + " ]";
                await JSRuntime.InvokeVoidAsync("geofenceEditor.centerMap", pos);
            }

            StateHasChanged();
        }

    }

    private void OnTimerCallback()
    {
        _ = InvokeAsync(() =>
       {    
            try {
                drone.GetDronePosition(ref lat, ref lng);

                string pos = "[ " + lat + ", " + lng + " ]";
                JSRuntime.InvokeVoidAsync("geofenceEditor.setDronePos", pos);

                drone.GetTargetPosition(ref lat, ref lng);
                pos = "[ " + lat + ", " + lng + " ]";
                JSRuntime.InvokeVoidAsync("geofenceEditor.setTargetPos", pos);
            } catch (Exception e) {
                Console.WriteLine(e);
            }
        });
    }
}
