@page "/status"

@using System
@using System.Timers
@using WebUI.Data

@inject DroneControlService drone

<PageTitle>Status</PageTitle>

<h1>Status</h1>

<h5>Debugging Commands</h5>
<p>
<button @onclick="Connect">Connect</button>
<button @onclick="Disconnect">Disconnect</button>
<button @onclick="Survey">Survey</button>
<button @onclick="Land">Land</button>
<button @onclick="ReturnHome">Return Home</button>
<button @onclick="Restart">Restart DCS</button>
<button @onclick="Thermal">Toggle Thermal</button>
<button @onclick="Detection">Toggle Detection</button>
</p>
<p><label>@("DCS Response: " + response)</label></p>

<h5>State of Health</h5>
<div><label>@("Connection - " + connection)</label></div>
<div><label>@("Battery Level - " + battery + "%")</label></div>
<div><label>@("Cameras - " + cams)</label></div>
<div><label>@("IMU - " + imu)</label></div>
<div><label>@("Magnetometer - " + mag)</label></div>
<div><label>@("Barometer - " + baro)</label></div>
<div><label>@("GPS - " + gps)</label></div>
<div><label>@("Ultrasonic - " + ultra)</label></div>
<div><label>@("Vertical Camera - " + vert)</label></div>
<div><label>@("Latitude - " + lat)</label></div>
<div><label>@("Longitude - " + lng)</label></div>

@code {
    public string imagePath = "N/A"; 
    private Timer timer = new Timer(1000);

    public string response = "N/A";
    private string connection = "Disconnected"; 
    private string battery = "N/A"; 
    private string cams = "N/A"; 
    private string imu = "N/A"; 
    private string mag = "N/A"; 
    private string baro = "N/A"; 
    private string gps = "N/A"; 
    private string ultra = "N/A"; 
    private string vert = "N/A"; 
    private string lat = "N/A";
    private string lng = "N/A";

    protected override void OnInitialized()
    {
        timer.Elapsed += (sender, eventArgs) => OnTimerCallback();
        timer.AutoReset = true;
        timer.Start(); 
    }

    public void Connect()
    {
        drone.SendCommand("ConnectDrone");

        while (!drone.CheckResponses(ref response));

        drone.StreamState(true);
        StateHasChanged();
    }

    public void Disconnect()
    {
        drone.SendCommand("DisconnectDrone");
        drone.StreamState(false);

        while (!drone.CheckResponses(ref response));

        StateHasChanged();
    }

    public void Survey()
    {
        drone.SendCommand("Survey");

        while (!drone.CheckResponses(ref response));

        StateHasChanged();
    }

    public void Land()
    {
        drone.SendCommand("Land");

        while (!drone.CheckResponses(ref response));

        StateHasChanged();
    }

    public void ReturnHome()
    {
        drone.SendCommand("ReturnHome");

        while (!drone.CheckResponses(ref response));

        StateHasChanged();
    }

    public void Restart()
    {   
        drone.StreamState(false);
        drone.SendCommand("Terminate");

        drone.LogMessage("Restarting Drone Control Service!", "LOG");
        drone.RunCommandWithBash("killall -9 python3");

        StateHasChanged();
    }

    public void Thermal()
    {
        drone.SendCommand("Thermal");

        while (!drone.CheckResponses(ref response));

        StateHasChanged();
    }

    public void Detection()
    {
        drone.SendCommand("Detection");

        while(!drone.CheckResponses(ref response));

        StateHasChanged();
    }

    private void OnTimerCallback()
    {
        _ = InvokeAsync(() =>
       {    
            try {
                drone.GetSOH(ref connection, ref battery, ref cams,
                    ref imu, ref mag, ref baro, ref gps,
                    ref ultra, ref vert, ref lat, ref lng);
                StateHasChanged();
            } catch (Exception e) {
                Console.WriteLine(e);
            }
        });
    }
}
